js is case senttive language
//1-8-24//
- Functions : used to perform specific task
    - functions definition : Definting task to be perfromed
        -syntax - function function-name(arg1,.....argn){
            function body - here we have to define task
        }
    - function call - to execute function we have to call 
        - syntax : function-name(p1,...pn)
    -  return statements
    - Types of Functions (--2/8/24--)
        - Arrow function : alternative of normal function definition
            - syntax : function-name = (arg1,....argn)=>{ function body - here we have to define task }
            - Arrow function is not hosted.
        - Predefined functions : console.log()
        - CallBack function : A function definition inside another function call
        - Anonymous function : nameless function / self executing Functions
        - Recursive function : calling the Function inside its own Definition 
        - Nested function :  A function definition inside another function
            - closure property in JS : in a nested function child function can access both its own
             parent function
        - Currying function : used to transform the function of multiple argument into several function of single argument.
        - Higher order function : 
                -> A higher order function is a function that takes one or more functions as arguments, or returns a function as its result.

- Array : used to store multiple values in a single variable (--5/8/24--)
    --index will always starts from zero / 0's. 
    --In order to find total items in a array, there is a key word ".length"
        eg, variable-name.length
    --to find the last item in a array , use ".length-1"
        eg, variable-name.length-1
    --to find the type of that array, use 'typeof' and the answer will be 'object'. (the typeof an Array is object)

    - Array methods / Predefined functions in Array :
        - push(item) : used to insert a item at the end of an array
        - unshift(item) : used to insert a item at the starting of an array
        - pop() : remove item from ending of an array
        - shift() : remove item from starting of an array
        - sort(callback) : this method is used to sort an Array in ascending / descending order (--7/8/24--)
            ascending order : syntax->  variable-name.sort((a,b)=>a-b)
            descending order : syntax-> variable-name.sort((a,b)=>b-a)
        
        - forEach(callback) : alternative of for-of loop, to iterata an array and it wont return anything.  (-8/8/24-)
            * in forEach() three arguments can pass. 
            * in a array if we to display item one by one use forEach() function!!
            syntax :
                Array.forEach(callbackfn: (value: T, index: number, array: readonly T[]) => void, thisArg?: any):
        
        - map(callback) : return a new array with values afeter applying a mapping function to an existing function.
        
        - filter(callback) : return a new array with items satisfying the condition applied to the existing array.
            * A function that accepts up to "three arguments." The filter method calls the predicate function one time for each element in the array. Returns the elements of an array that meet the condition specified in a callback function.
        - find(callback) : return a single value with items satisfying the condition applied to the existing array.
            * Returns the value of the first element in the array where predicate is true, and undefined otherwise.
        
        - reduce(callback) : return a single value (largest/smallest/total sum) after applying reduce function to an existing array.
            * in reduce() if we have to use any type of arithmetic operation then the Array must contains intgers/numbers values only!(then only it will work otherwise it won't)
            * This function that accepts up to four arguments. The reduce method calls the callbackfn function one time for each element in the array.

        (--9/8/24--)
        - reduceRight(callback) : reutrn the 1st value (largest/smallest/total sum) after applying reduce function to an existing array 
        - some(callback) : return a boolean value afetr applying a condtion to an existing array, it will ture if one of item satisfy

            * A function that accepts up to three arguments. The some method calls the predicate function for each element in the array until the predicate returns a value which is coercible to the Boolean value true, or until the end of the array

        - every(callback) : return a boolean value after applyinga condition to an existing array, it will true if one of item satisfythe given condition.

        (--12/8/24--)
        - flat(depth) : used to reduce dimension of an array, if depth is 'Infinity' then flat always returns single dimension array.
            * Infinity : its a conant
        - includes(key) : used to return a boolean value based on key present in the array or not
            * Returns true if key is included in the range, and false otherwise.
        - reverse() : used to display items in reverse 
            * Reverses the elements in an array in place. This method mutates the array and returns a reference to the same array.
        - indexOf() : return index of a data present in the array
        - join(seperator) : return a sting seperated with seperator while joining all array items.
        - slice(start,end) : used to display part of an array
        - splice(starting index,delete count) : used to remove items from an array 
        - concat() : used to join two array in a single array.
            * The strings to append to the end of the string.
            * Returns a string that contains the concatenation of two or more strings.




    - loops in Array (--5/8/24--)
        - for loops
        - for-of loop  // this only work in array JS
            - syntax : 
                for(let day of variable-name){
                    console.log(day);    
                }
        - for-in loop  // this only work in array JS
            - syntax : 
                for(let index in variable-name){
                    console.log(variable-name[index]);    
                }
- String : collection of Character and enlcosed in either single or double quotes (--13/8/24--)
    String methods :
        - substring() : 
        - slice() : 
        - toUpperCase() :
        - toLowerCase() :
        - startsWith() :
        - endsWith() : 
        - trim() : it remove unwanted white space inthe starting of an string.
        - split() : 
        - eval() :
        // its an array method!!! , it can also be used in string too.
        - Array.from() : it is pre define method , used to iterating elements converted to an array, so we use 'Array.from()' 
            * An iterable object to convert to an array. Creates an array from an iterable object.
        //
        - includes() :
- Object : used to stroe multiple values, store data as key:value pair, (--14/8/24)
    - create an object : {key:value}
    - to access values from an object
        - use bracket notation :object-name["key"] , the bracket notation will work in every method 
        - use dot notation : object-name.key ,it is not nesscerary to work in every method 
    - check a key is present in an object
        - operator 'in' : "key" in object-name it return boolean
        - hasOwnProperty() : object-name.hasOwnProperty(key) it return boolean
    - insert data to an abject
        - object-name["key"] = value / object-name.key = value
            eg, employee.empExperience = 5
        - Object.assign(target-abject,source) , it is a pre-define 'Object' in JS. 
            eg, Object.assign(employee,{isVaccinated:true})
    - update value of an existing object
    - Object.keys(object-name) : display all keys in an object
    - Object.values(object-name) : display all values in an object
    - Object.entries(object-name) : used to convert object to an array
    - delete keyword(delete object-name.key) : to delete key-value from an object
    - Object destructuring : const {key1,key2,.....,keyn} = object-name
- Handing Runtime errors in Js (--20/8/24--)
    - Try-catch-finally Block : it will only execute when ever 
- OOP : Object oriented programming (--21/8/24--)
    - class : blueprint of object, use class keyword to create class in JS
    - object : real world entity, to access class featires outside the class create object
        -syntax : objectName = new className()
    - reference : used to link class with its properties, use this keyword to link properties an d functions with class
    - OOPs features (--22/8/24--)
        - Inheritance
            - Classical Inheritance : use extends keyword
            - Prototype Inheritance : use __proto__ keyword
        - Polymorphism : same function name with different arguments, there no feature like Polymorphism in JS so we use Rest operator of JS
        - Abstraction : Hiding the important data from user
        - Encapsulation : Date inside another data
--/-- (--10/9/24--)
- Modules in JAVASCRIPT : used to communicate data from one js file to another
    - 'export' / 'export default' keyword : used to export data/function from a js file
    - import keyword : to access the content exported from a js file
--\--


////---////
7 Primitives data types :-
// nn bb ss u
null, number, boolean, bigInt, Symbol, String, undefined
////---////


(--22/8/24--)
------------------------------------------------
        JAVASCRIPT - SCRIPING language 
------------------------------------------------
1. Provide Behavior to HTML elements
2. Applying JS in webpage
    - Internal JS : using script tag to defining 'js code' in HTML
    - External JS : using script tag to link External js to HTML page
3. DOM : Document Object Model, which is a tree representation of a weboage , every tree must have a single parent node, js can access DOM using 'document' object 

4.DOM Methods : Selecting HTML elements to JS
    - use tag name : document.getElementByTagName('tagName')
    - use id name : document.getElementByTagId('id') / id
    - use class name : document.getElementByClassName('className')
    - use querySelector : document.querySelector('#id/.className/tag')
    - use querySelectorAll : document.querySelectorAll('#id/.className/tag')
5. HTML Events : Mouse related events, keyword related events , Touch related events,
    - user will trigger events to change the behavior pf a web page
6. Binding Events : eventName = function-name(), define the behavior in a function and call the function when an event is occur in a html element 
7. Access/Updating Content of an HTML element
    - innerHTML
    - innerText 
8. Permanent Storage in browser (--26/8/24--)
    - Local Storage : data stored as key and value pair, buit here both key and value type must be 'string'
        - serItem(key,value) : data will stored in local Storage
        - getItem(key) : to get datas stored in local Storage
        - removeItem(key) : to remove data
    - Session Storage
9. API (Application Programming Interface) : used to communicate different applicton in internet. (--27/8/24--) 
    - REST (Representational State Transfer) API :  uses in client-server app, HTTP request, pass different types of data (JSON,XML, Binary...) via its body 
    - SOCKET
    - URL : Uniform Resource Locator - ex: https://jsonplaceholder.typicode.com/users/1
        - base url : ex: https://jsonplaceholder.typicode.com
        - URI : Uniform Resource Identifer - ex: https://jsonplaceholder.typicode.com/users
        - path Parameter : ex: 1
        - query Parameter : content after ?, ex: https://in.search.yahoo.com/search?fr=mcafee&type-E2111N127460&p-mercury
        - body parameter 
    - HTTP (Hyper Text Transfer Protocol)
        - HTTP Request : 2 parts, Header part, body part. data to be shared stored in body part 
            - GET : used to read / get data from anthoer app
            - POST : used to create data in an app
            - PUT - used to update entire data already in their app
            - PATCH : used to update partial data already in their app
            - DELETE : used to remove a data from an app
        - HTTP Response, status code 
            - 1xx : Informational
            - 2xx : Success
            - 3xx : Redirection
            - 4xx : Client errors 
            - 5xx : Server errors
    - JSON : JAVASCRIPT Object notation, data stored as key value pair, but type key must be string,
    {"Key":value}, is the format of data to be transfer within internet
10. Handling functions in JS : 'Single threaded programming language' beacuse it has only 'one call stack' to resolve functions
    - Synchronous Functions : execute without any time delay
    - Asynchronus functions : execute after a time delay, js uses event loop to resolve Asynchronus functions
    Functions
        - Handling Asynchronus function in js
            - CallBack functions : may lead to callback hell (Nesting of callback functions)
            - API calls : Handling api call
                - callback function : it lead to callback hell
                - promise : used to resolve api call
                - every promise has 2 states 
                    - resolved state : whenever we get a response for a Request, to access response from resolved state, promise uses 'then' method, syntax : then(callback) response will be in the call back
                    - reject state : if user doesnot get any response for its request, to access reject state, use promise 'catch' method, syntax : catch(callback), reason to reject request will be in the callback
                --/\ (--30/8/24--)
                - Async -  await keyword : Resolve promise wihtout using callback , we can use async keyword only in a function definition 
                \/--
        - Different type of Asynchronus function in js
            - CallBack functions : may lead to callback hell (Nesting of callback functions)
            - API calls : Handling api call (AJAX : Asynchronus JAVASCRIPT XML , using js to make api call)
                - using XMLHttpRequest class (--28/8/24--)
                - using fetch method : this method is based on promise
                - using axios library : based on promise
                 
    
(--9/9/24--)    
----------------------------------------------------------
        REACT - FRONT END TECHNOLOGY - JS LIBRARY   
----------------------------------------------------------

1. React Basic Concepts
    - React App : {collection of JS libraries,} used to build a Single page Application
    - React app is an a collection of components, components used to display content in browser, all components are arranged as a tree structure in react app, root node / root component of react appp will always 'App' Component
    - Pure Function : used to build components, which doesnot cause side effects
    - Declarative Approach  
    - Virtual DOM : Light weight representation of Real DOM , it helps faster loading of contents in app
    - Babel library : Transiple React code to simple reatctfunction which is understood by browser
    - JSX (JAVASCRIPT XML - JAVASCRIPT Extension for HTML code)  used to display contents in browser
        - JSX Element : const heading = <h1>Heading</h1>
        - Rules of JSX code
            - Every JSX Elements must be in a parent/container tag, this container tag can be div/section/article.. or React Fragment (tag without name is know as React Fragment) <></> 
            - Every JSX element must have an ending/close tag, <tag-name>content</tag-name>, <tag-name/> (self closing tag : used to represent tag without content)
            - JSX follow camel case (if a word has 2 words then second word first letter must be in capital case - font-size : fontSize)
            - Instead of using attribute 'class' use 'className'
            - Instead of using attribute 'for' use 'htmlFor'
            - use JS code directly in JSX, use {} to provide js code in JSX, ex: {js code}
2. React App Creation
    - CRA (using create-react-app command)
    - Vite : is a web project building tool
        - install vite globally : npm i -g create-vite
        - react app using vite : npm create vite@latest reactAppName -- --template react
        - to run react app using vite : npm run dev
        - to get build folder to deploy : npm run build, use dist folder for deployment

3. Files & foldr Structure of React app using vite (--10/9/24--)
    - package.json file : npm configuration file
    - package-lock.json file : used to store version history of packages used in the project
    - .gitignore file : used to mention data to be ignored while adding to git
    - eslint.config.js file : js configuration 
    - vite.config.js file : 
    - index.html file : entry point, its body must container a  div with id as root , include main.jsx file uisng script
    - node_modules folder : used to store exiternal package dependencies in local project (if u have 'package.js file' the to generate node_modules use command : 'npm install')
    - public folder : data inside public folder available globally in project
    - src folder : source folder , define logic of react app here
        - main.jsx file : createRoot used to render react app in DOM element wiht id as root
        - index.css / App.css files : used to style jsx elements (--11/9/24--) 
        - App.jsx file : root component of react app 
        - assets folder : used to store media files used in our react app  
4. Components in React : used to display contents in browser
    - To create a component in react : 2 Ways, create js/jsx file, and its filename must be starts with capital letter
        - Functional (/ Stateless) Based Components : use js pure function with its name same as its file and function must return jsx code
        - Class Based Components / statefull component :
    //(--20/9/24--)\\
    - Difference between class vs function based component
            Class based component                         Functional based component
    -------------------------------------------        -----------------------------------------------
    1. Using js Class to inherit from react             1. Using js pure function and return jsx
    component, and render JSX 
    2. component will live depending on different       2. it executes from top to botton, once it 
    lifecycle methods                                    returns, it cannot be alive                       
    3. Statefull component                              3. Stateless component
    4. Do not use Hooks                                 4. Hooks are used
    5. Lifecycle methods available                      5. lifecycle methods are not available
    6. uses render method to display jsx into DOM       6. No need to use render method
    7. Use Constructor to initialise state              7. No need to use Constructor
    //-------\\
// rafce (reactArrowFunctionExportComponent)
5. Data sharing in React App
    - Parent to child Data sharing : child can access data from parent using 'props'
6. Props in React : props maens property of a components, and props will be the argument of that components , and it type is object and used to transfer data from parent to child
7. Conditional Rensering : based on a condition display jsx elements into browser, use if (&&) , if-else (?:) thses operators to render jsx into browser
8. CSS Styling in React : (--18/9/24--)
    - Inline CSS in jsx : using style attribute, we can pass style as an object, style={{property:value}}
    - External CSS in jsx : define css style in a External file and to apply style we have to inport css file in component
        - import 'css-file-path'
    - CSS module file : use Extension .module.css file,here it can import to a variable in a component, define style using class in module css file 
9. Event Handling in React : according ot each event jsx element has to bind/call a function 
    - Calling function without argument : event={functionName}
    - Calling function with argument : event={()=>functionName(arg1,....)}
    - Calling function with argument as event : event={(event)=>functionName(event)}
10. Array in REACT Jsx : use map method to display array in JSX , to uniquely identify each item use 'key' props.
11. State : use to store values in a component, whenever state changes then component will re-render (--19/9/24--)
    - to update state : use setState(value)
// rcc - reactClassComponent
12. Lifecycle methods of React component
    - Mounting Phase : putting component into browser
        - Constructor()
        - getDerivedStateFromProps()
        - render()
        - componentDidMount()

    - Updating phase : when component Updating
        - getDerivedStateFromProps()
        - shouldComponentUpdate()
        - render()
        - getSnapshotBeforeUpdate()
        - componentDidUpdate()

    - Unmounting phase : Removing component from DOM
        - componentwillUnmount()
13. React Hooks : used to provide react component features to functional based component, they are predefine function, that function name must start with 'use' keyword, to use hook in functional component must call it
    - Rules to use hook in Functional Component
        - Import hook from React in component
        - Call hooks in top left of a component
        - Hooks cannot be conditional 
    - Types of Hooks 
        - Predefined Hooks
            - useState(intial-value) : used to create state in functional component, it will return state value , function name to update state value and stored in an array
            - useEffect(side effect function,dependency) : used to provide side effect to the component (--20/9/24--)
                - side effect function : used to define whcih side effects to be applied in component
                - dependency : used to control when useEffect hook must call in a component
                    - no dependency : useEffect hook will call the time in component (it become an infinite loop)
                    - [] : useEffect hook will call only at time of component Creation 
                    - [state/props/variable] : useEffect hook will call at time of component Creation as well as changes in the value state/props/variable passed in the dependency
        - custom Hooks : userdefine hooks 
            - Create a function with a name starts with 'use'
14. External React component libraries :- (--23/9/24--)
    Material UI : npm install @mui/material @emotion/react @emotion/styled
15. Handling Form in React : react can Handle forms in 2 Ways (--24/9/24--)
    - Controlled Component : In a component, form data is manage
    - Uncontrolled Component :







